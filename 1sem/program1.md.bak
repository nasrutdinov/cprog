# Программа  - 2 семестр

## Февраль

### 1. Понятие алгоритма. RAM-модель.  O-символика. 
Приводим пример алгоритма вычисления чисел Фибоначчи. Сравниваем время работы рекурсивной  и итеративной версии.  Считаем количество операций. Лемма о количестве операций $\geq 2^{n/2}$. Пример сортировки массива методом вставки. Считаем количество операций в наихудшем случае.  Квадратичная сортировка. Оценка количества операций сверху. O-символика. Модель памяти. RAM-модель.  

### 1. Практика. 

  1. Сортировка "пузырьком" (bubble sort): односторонний проход.
  2. Сортировка "пузырьком" (bubble sort): двусторонний проход. 

Обязательное требование - чтение массива из файла. Дополнительно - подсчет времени работы, тестирование крайних случаев, использование динамических массивов. Использование vector<> 

### 2. Сортировки массивов. Сортировка слиянием.  
Квадратичные сортировки. Сортировка вставкой, пузырьком и сортировка обменом.  Пример сортировки n log(n). Сортировка слиянием. Рекурсивные алгоритмы. Оценка быстродействия. Анализ рекуррентных соотношений. 

### 2. Практика. 

   1. Сортировка "слиянием" (merge sort): рекурсивный алгоритм.
  2. Сортировка "слиянием" (merge sort): итеративный алгоритм.

Обязательное требование - чтение массива из файла. Дополнительно - подсчет времени работы, тестирование крайних случаев. 

### 3. Сортировки массивов. Сортировка кучей.  
Структура данных куча. Реализация кучи на массиве. Операции вставки и взятия наименьшего элемента. Сортировка кучей. Оценка быстродействия. Теорема о нижней границе быстродействия алгоритмов сравнения. Цифровая сортировка. 

### 3. Практика. 

  1. Сортировка "кучей" (heap sort): рекурсивный алгоритм.
  2. Сортировка "кучей" (heap sort): итеративный алгоритм.


### 4. Сортировки массивов.  Быстрая сортировка.  
Быстрая сортировка. Оценка быстродействия - худший случай. Подсчет быстродействия рандомизированного алгоритма. Порядковая статистика. Алгоритм Хоара. Реализация на C++.  Алгоритм Хоара для нахождения k-ой порядковой статистики.

### 4. Практика. 

  1. "Быстрая" сортировка (quick sort): разделение на две части.
  2. "Быстрая" сортировка (quick sort): разделение на три части.
  
### Контрольная работа (лекция)

1. Вывести оценку рекуррентное соотношение. 
2. Провести оценку быстродействия алгоритма.
3. Доказать оценку O(n).

## Март 

### 5. Динамические структуры данных. Списки. 
Динамические структуры. Однонаправленный и двунаправленный список. Реализация на C++.  Структуры. Пространство имен. Элементы ООП. 

### 5. Практика. 

  1. Структуры данных (struct): агрегаты и атрибуты.
  2. Двусвязный список: узлы и связи.
  3. Двусвязный список: namespace list, struct Node, struct List.
  4. Двусвязный список: доступ к полям, инициализация и переопределение.

### 6. Структуры данных:  стеки очередь.   
Структуры данных  стек и и очередь. Реализация стека на массиве и списке. Динамическое выделение памяти.  Амортизированное время работы. Реализация стека и очереди в C++ (библиотека STL)   **Мало материала**

### 6. Практика. 
  1. Двусвязный список: базовые функции для работы с элементами контейнера.
  2. Двусвязный список: расширенные функции для работы с элементами контейнера.

### 7. Хеш-функции. 

Хеш функции, хеш значения, коллизии, обработка коллизий. Свойства хорошей хеш функции, способы построения хеш функций, примеры. Фильтр Блума. Поиск элементов. Хеш таблицы в стандартной библиотеке C++. Шаблонный класс std::unordered_map.

### 7. Практика. 
  1. Двусвязный список: перегрузка операторов и дополнительные функции.



----------------------------------------

## ? 
1. Чтобы не забыли - дать элементы методы вычислений (решение СЛУ, нахождение корней, таблицы функций)
2. Git
3. Cmake
4. Тестирование 


